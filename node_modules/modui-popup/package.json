{
  "name": "modui-popup",
  "version": "0.0.4",
  "description": "About =====",
  "main": "moduiPopup.js",
  "test": "test/test_moduiPopup.js",
  "style": "*.scss",
  "keywords": [
    "modui"
  ],
  "author": {
    "name": "Rotunda Software"
  },
  "license": "ISC",
  "transforms": [
    "sass-css-stream"
  ],
  "dependencies": {
    "backbone": "^1.1.2",
    "jquery": "^2.1.1",
    "modui-base": "^0.1.5",
    "sass-css-stream": "^0.1.1",
    "underscore": "^1.7.0"
  },
  "devDependencies": {
    "should": "^4.1.0"
  },
  "readme": "About\n=====\n\n`modui-popup` is a simple popup plugin extending from `modui`.\n\nInstall\n=======\n\nnpm install -g modui-popup\n\nDemo\n====\n\n[Click here](http://rotundasoftware.github.io/modui-popup/).\n\nUsage\n=====\n\nFirst, require `modui-popup\t into your app:\n\n\t\tvar ModuiPopup = require( 'modui-popup' );</pre>\n\t\t\t\t\t<p>You can then create a popup with the `open` function:</p>\n\t\t\t\t\t<pre class=\"code\">\n\t\tModuiPopup.open( {\n\t\t  target : $( '#example' ),\n\t\t  contents : 'Woah! You actually clicked it!'\n\t\t} );\n\nNote the two key-value pairs, `target` and `contents`. `target` specifies the DOM element beside which the popup will appear. Meanwhile, the `contents` will appear within the popup. You can assign `contents` as either a static string or a Backbone view, such as:\n\n\t\tModuiPopup.open( {\n\t\t  target : $( '#example' ),\n\t\t  contents : new ExampleView()\n\t\t} );\n\nposition\n----------\n\nIn addition to the two required key-value pairs, you can also pass in a `position`. By default, the popup will appear 'bottom center'. Valid `position`s include:\n\n* top left\n* top center\n* top right\n* left center\n* right center\n* bottom left\n* bottom center\n* bottom right\n\nkeepWithinRect\n----------------\n\nBy default, `modui-popup` will reposition popups that fall off the screen. You might want a more specific bounding box than the window itself, though. In the fourth example above, we show a popup box that is bound within a div. You can get this effect by assigning `keepWithinRect` a function that returns an object with coordinate key-values:\n\n\t\tModuiPopup.open( {\n\t\t  target : $( '#example' ),\n\t\t  contents : new ExampleView(),\n\t\t  keepWithinRect : function() { return {\n\t\t      top : $( '#example' ).offset().top,\n\t\t      bottom : $( '#example' ).offset().top + $( '#example' ).height(),\n\t\t      left   : $( '#example' ).offset().left,\n\t\t      right  : $( '#example' ).offset().left + $( '#example' ).width()\n\t\t    };\n\t\t  }\n\t\t} );",
  "readmeFilename": "README.md",
  "gitHead": "87f3f1c5280aece28a378cb6f9dcaf3872e1aee6",
  "_id": "modui-popup@0.0.4",
  "scripts": {},
  "_shasum": "745b1d31501ad2a3e98350f01af984d512da552b",
  "_from": "modui-popup@^0.0.4"
}
